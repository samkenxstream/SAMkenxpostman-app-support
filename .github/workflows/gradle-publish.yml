# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  release:
    types: [created]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build

    # The USERNAME and TOKEN need to correspond to the credentials environment variables used in
    # the publishing section of your build.gradle
    - name: Publish to GitHub Packages
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: publish
      env:
        USERNAME: ${{ github.actor }}
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
     - name: Setup Node.js environment

  uses: actions/setup-node@v2.5.2

  with:

    # Set always-auth in npmrc

    always-auth: # optional, default is false

    # Version Spec of the version to use.  Examples: 12.x, 10.15.1, >=10.15.0

    node-version: # optional

    # File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version

    node-version-file: # optional

    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.

    architecture: # optional

    # Set this option if you want the action to check for the latest available version that satisfies the version spec

    check-latest: # optional

    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN

    registry-url: # optional

    # Optional scope for authenticating against scoped registries

    scope: # optional

    # Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user.

    token: # optional, default is ${{ github.token }}

    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm

    cache: # optional

    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.

    cache-dependency-path: # optional

    # Deprecated. Use node-version instead. Will not be supported after October 1, 2019

    version: # optional
